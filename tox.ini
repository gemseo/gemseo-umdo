[tox]
min_version = 4
requires = tox-uv

[testenv]
package = editable
deps = {env:TOX_TESTENV_DEPS:-r requirements/test-python{py_dot_ver}.txt}
set_env =
    # Workaround matplotlib on windows server 2012 and gitlab-runner,
    # matplotlib cannot access a registry key and falls back to the WINDIR var
    # https://matplotlib.org/stable/api/font_manager_api.html#matplotlib.font_manager.win32FontDirectory.
    WINDIR = {env:WINDIR:C:\Windows}
    # Use a non GUI rendering backend for matplotlib.
    MPLBACKEND = AGG
    # Define pytest options for using coverage.
    coverage: __COVERAGE_POSARGS=--cov --cov-report=xml --cov-report=html --no-cov-on-fail
pass_env =
    # See gemseo developers docs.
    GEMSEO_KEEP_IMAGE_COMPARISONS
commands =
    pytest {env:__COVERAGE_POSARGS:} {posargs}

[testenv:check]
description = run code formatting and checking
deps = -r requirements/check.txt
skip_install = true
allowlist_externals = pre-commit
commands =
    pre-commit install
    pre-commit run --all-files

[testenv:doc]
description = build documentation
basepython = python3.12
deps = -r requirements/doc.txt
commands =
    mkdocs serve

[testenv:dist]
description = create and check the pypi distribution
deps =
    check-wheel-contents
    uv
skip_install = true
allowlist_externals = rm
commands =
    rm -rf dist build
    uv build
    # W002: ignore duplicated files.
    check-wheel-contents dist --ignore W002

[testenv:dist-upload]
description = upload existing distribution files to a package repository
skip_install = true
deps = uv
pass_env =
    UV_PUBLISH_TOKEN
    UV_PUBLISH_URL
commands =
    uv publish

[testenv:pypi-py{39,310,311,312}]
description = test the pypi distribution
deps =
    gemseo-umdo
    pytest-xdist
skip_install = true

[testenv:update-deps]
description = update the envs dependencies
set_env =
pass_env =
deps =
    pre-commit
    uv
skip_install = true
commands =
    uv pip compile --upgrade --python-platform linux                                   -o requirements/check.txt           requirements/check.in
    uv pip compile --upgrade --python-platform linux --group dev --python-version 3.9  -o requirements/test-python3.9.txt  pyproject.toml {posargs:--constraint requirements/test-constraints.in}
    uv pip compile --upgrade --python-platform linux --group dev --python-version 3.10 -o requirements/test-python3.10.txt pyproject.toml {posargs:--constraint requirements/test-constraints.in}
    uv pip compile --upgrade --python-platform linux --group dev --python-version 3.11 -o requirements/test-python3.11.txt pyproject.toml {posargs:--constraint requirements/test-constraints.in}
    uv pip compile --upgrade --python-platform linux --group dev --python-version 3.12 -o requirements/test-python3.12.txt pyproject.toml {posargs:--constraint requirements/test-constraints.in}
    uv pip compile --upgrade --python-platform linux --group doc --python-version 3.12 -o requirements/doc.txt             pyproject.toml {posargs:--constraint requirements/test-constraints.in}
    pre-commit autoupdate
