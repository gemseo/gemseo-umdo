# Copyright 2021 IRT Saint ExupÃ©ry, https://www.irt-saintexupery.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 3 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""Some disciplines."""

from __future__ import annotations

from typing import TYPE_CHECKING

from gemseo.core.chains.chain import MDOChain
from gemseo.disciplines.analytic import AnalyticDiscipline

from gemseo_umdo.disciplines.noiser_factory import NoiserFactory

if TYPE_CHECKING:
    from collections.abc import Mapping

    from gemseo import DesignSpace


def create_noising_discipline_chain(
    input_space: DesignSpace,
    uncertain_input_variables: Mapping[str, str | tuple[str, str]],
) -> MDOChain:
    """Create a disciplines chain to noise input variables and rename input variables.

    Args:
        input_space: The input space
            whose uncertain input variables are renamed by this method.
        uncertain_input_variables: This argument facilitates
            the definition of uncertain input variables in two ways.
            The first way consists of passing a dictionary
            of the form `{"x1": ("+", "u1"), "x2": ("*", "u2"), ...}`
            which defines the uncertain input variables as
            `x1 = dv_x1 + u1` and `x2 = dv_x2 * (1 + u2)`.
            Here `"x1"` and `"x2"` are the names of the input variables
            made uncertain by the random variables `"u_1"` and `"u_2"`
            which typically have zero mean.
            `"x1"` and `"x2"` are the names of the input variables
            actually used in `disciplines`
            while the names `"dv_x1"` and `dv_x2` are generated by the scenario.
            More generally,
            the first element of the tuple is assumed
            to be either the class name or the
            [SHORT_NAME][gemseo_umdo.disciplines.base_noiser.BaseNoiser.SHORT_NAME]
            of a
            [BaseNoiser][gemseo_umdo.disciplines.base_noiser.BaseNoiser]
            (feel free to create new noising disciplines).
            The second way of defining these uncertain input variables
            consists of passing a set of more complex expressions
            of the form `{"x": "{} + u", ...}`
            where `"x"` is the name of the input variable
            actually used in the equations,
            `"u"` is the name of the uncertain variable
            defined in the `uncertain_space`
            and `"{}"` is the optimization variable.
            Leave `"{}"` as is; it will be automatically replaced by `"dv_x"`.
            This more complex format assumes variables of dimension 1.
            If `None`,
            do not consider other variable relations
            than those defined by `disciplines`.

    Returns:
        The noising disciplines.
    """
    noising_disciplines = []

    expressions = {
        dv_name: v
        for dv_name, v in uncertain_input_variables.items()
        if isinstance(v, str)
    }
    if expressions:
        for dv_name, expression in expressions.items():
            new_dv_name = f"dv_{dv_name}"
            input_space.rename_variable(dv_name, new_dv_name)
            expressions[dv_name] = expression.replace("{}", new_dv_name)

        noising_disciplines.append(AnalyticDiscipline(expressions))

    for dv_name, v in uncertain_input_variables.items():
        if dv_name in expressions:
            continue

        new_dv_name = f"dv_{dv_name}"
        input_space.rename_variable(dv_name, new_dv_name)
        noising_disciplines.append(
            NoiserFactory().create(v[0], new_dv_name, dv_name, v[1])
        )

    return MDOChain(noising_disciplines, name="DesignVariablesNoiser")
