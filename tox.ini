[tox]
min_version = 4
requires = tox-uv

[testenv]
package = editable
deps =
    {env:TOX_TESTENV_DEPS:-r requirements/test-python{py_dot_ver}.txt}
extras = test
set_env =
    # Workaround matplotlib on windows server 2012 and gitlab-runner,
    # matplotlib cannot access a registry key and falls back to the WINDIR var
    # https://matplotlib.org/stable/api/font_manager_api.html#matplotlib.font_manager.win32FontDirectory.
    WINDIR = {env:WINDIR:C:\Windows}
    # Use a non GUI rendering backend for matplotlib.
    MPLBACKEND = AGG
    # Define pytest options for using coverage.
    coverage: __COVERAGE_POSARGS=--cov --cov-report=xml --cov-report=html --no-cov-on-fail
pass_env =
    # See gemseo developers docs.
    GEMSEO_KEEP_IMAGE_COMPARISONS
commands =
    pytest {env:__COVERAGE_POSARGS:} {posargs}

[testenv:check]
description = run code formatting and checking
deps = -r requirements/check.txt
skip_install = true
allowlist_externals = pre-commit
commands =
    pre-commit install
    pre-commit run --all-files

[testenv:doc]
description = build documentation
basepython = python3.9
deps = -r requirements/doc.txt
extras = doc
commands =
    mkdocs serve

[testenv:dist]
description = create and check the pypi distribution
deps =
    check-wheel-contents
    twine
    build
skip_install = true
allowlist_externals = rm
commands =
    rm -rf dist build
    python -m build --wheel
    twine check dist/*
    # W002: ignore duplicated files.
    check-wheel-contents dist --ignore W002

[testenv:dist-upload]
description = upload existing distribution files to a package repository
deps = twine
skip_install = true
pass_env =
    PYTHON_REPOSITORY_USERNAME
    PYTHON_REPOSITORY_PASSWORD
    PYTHON_REPOSITORY_URL
commands =
    twine upload --username {env:PYTHON_REPOSITORY_USERNAME} --password {env:PYTHON_REPOSITORY_PASSWORD} --repository-url {env:PYTHON_REPOSITORY_URL} dist/*

[testenv:pypi-py{39,310,311,312}]
description = test the pypi distribution
deps = gemseo-umdo[test]
skip_install = true

[testenv:update-deps]
description = update the envs dependencies
set_env =
pass_env =
deps =
    uv
    pre-commit
skip_install = true
commands =
    # Passing a posargs will ignore using gemseo from the develop branch and will use a release from PyPI instead.
    uv pip compile --upgrade --extra test --python-platform linux {posargs:--constraint requirements/test-constraints.in} -o requirements/test-python3.9.txt  --python-version 3.9  pyproject.toml
    uv pip compile --upgrade --extra test --python-platform linux {posargs:--constraint requirements/test-constraints.in} -o requirements/test-python3.10.txt --python-version 3.10 pyproject.toml
    uv pip compile --upgrade --extra test --python-platform linux {posargs:--constraint requirements/test-constraints.in} -o requirements/test-python3.11.txt --python-version 3.11 pyproject.toml
    uv pip compile --upgrade --extra test --python-platform linux {posargs:--constraint requirements/test-constraints.in} -o requirements/test-python3.12.txt --python-version 3.12 pyproject.toml
    # Using Python 3.9 for the doc should work everywhere.
    uv pip compile --upgrade --extra doc  --python-platform linux {posargs:--constraint requirements/test-constraints.in} -o requirements/doc.txt             --python-version 3.9  pyproject.toml
    uv pip compile --upgrade requirements/check.in       -o requirements/check.txt
    pre-commit autoupdate
